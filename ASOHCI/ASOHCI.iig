//
//  ASOHCI.iig
//  ASOHCI
//
//  Created by Aleksandr Shabelnikov on 23.08.2025.
//

#ifndef ASOHCI_h
#define ASOHCI_h

#include <Availability.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IOInterruptDispatchSource.iig>
#include <DriverKit/OSData.iig>
#include <DriverKit/IOBufferMemoryDescriptor.iig>
#include <DriverKit/IOMemoryDescriptor.iig>
#include <DriverKit/IOMemoryMap.iig>
#include <DriverKit/IODMACommand.iig>
#include <PCIDriverKit/IOPCIDevice.iig>

// Forward declaration for Link API
// class ASOHCILinkAPI;


class ASOHCI : public IOService
{
public:
    virtual bool init() override;
    virtual void free() override;
    virtual kern_return_t Start(IOService* provider) override;
    virtual kern_return_t Stop(IOService* provider) override;

    // Interrupt handling
    virtual void InterruptOccurred(OSAction* action, uint64_t count, uint64_t time)
        TYPE(IOInterruptDispatchSource::InterruptOccurred);

    // Public API methods
    virtual kern_return_t CopyBridgeLogs(OSData** outData) LOCALONLY;

private:
    // Helper methods
    virtual void ArmSelfIDReceive(bool clearCount) LOCALONLY;
    
    // Error handling
    virtual void CleanupOnError() LOCALONLY;

    // Implementation helper methods
    virtual kern_return_t CreateWorkQueue() LOCALONLY;
    virtual kern_return_t MapDeviceMemory() LOCALONLY;
    virtual kern_return_t InitializeManagers() LOCALONLY;
    virtual kern_return_t InitializeOHCI() LOCALONLY;
    virtual kern_return_t SetupInterrupts() LOCALONLY;
    virtual kern_return_t InitializeOHCIHardware() LOCALONLY;

    // NO ivars struct exposed - move to implementation
};

#endif /* ASOHCI_h */
