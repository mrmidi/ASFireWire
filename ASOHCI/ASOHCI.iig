//
//  ASOHCI.iig
//  ASOHCI
//
//  Created by Aleksandr Shabelnikov on 23.08.2025.
//

#ifndef ASOHCI_h
#define ASOHCI_h

#include <Availability.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IOInterruptDispatchSource.iig>
#include <DriverKit/OSData.iig>
#include <DriverKit/IOBufferMemoryDescriptor.iig>
#include <DriverKit/IOMemoryDescriptor.iig>
#include <DriverKit/IOMemoryMap.iig>
#include <DriverKit/IODMACommand.iig>
#include <PCIDriverKit/IOPCIDevice.iig>


class ASOHCI : public IOService
{
public:
    virtual bool init() override;
    virtual void free() override;
    virtual kern_return_t Start(IOService* provider) override;
    virtual kern_return_t Stop(IOService* provider) override;

    // Interrupt action (called on a DriverKit dispatch queue)
    virtual void InterruptOccurred(OSAction* action,
                                   uint64_t count,
                                   uint64_t time)
        TYPE(IOInterruptDispatchSource::InterruptOccurred);

    // Bridge logging method
    virtual kern_return_t CopyBridgeLogs(OSData** outData);

private:
    // Helper to arm Self-ID receive buffer and enable bits
    virtual void ArmSelfIDReceive(bool clearCount) LOCALONLY;

    // Per-instance state managed by IIG (ivars pointer is auto-provided)
    struct ivars {
        // Device / MMIO
        IOPCIDevice*               pciDevice     = nullptr;
        IOMemoryMap*               bar0Map       = nullptr;
        uint8_t                    barIndex      = 0;
        IOInterruptDispatchSource* intSource     = nullptr;
        IODispatchQueue*           defaultQ      = nullptr;

        // Interrupt/accounting
        uint64_t                   interruptCount = 0;

        // Self-ID DMA resources
        IOBufferMemoryDescriptor*  selfIDBuffer  = nullptr;
        IODMACommand*              selfIDDMA     = nullptr;
        IOAddressSegment           selfIDSeg     = {};
        IOMemoryMap*               selfIDMap     = nullptr; // CPU mapping

        // Config ROM DMA resources
        IOBufferMemoryDescriptor*  configROMBuffer = nullptr; // 1KB ROM image
        IOMemoryMap*               configROMMap    = nullptr; // CPU mapping
        IODMACommand*              configROMDMA    = nullptr; // DMA mapping
        IOAddressSegment           configROMSeg    = {};      // 32-bit IOVA
        uint32_t                   configROMHeaderQuad = 0;   // Computed BIB header quadlet
        uint32_t                   configROMBusOptions = 0;   // Mirror of ROM[2]
        bool                       configROMHeaderNeedsCommit = false; // Write hdr after next BusReset

        // Link/Bus state flags
        bool                       cycleTimerArmed   = false;
        bool                       selfIDInProgress  = false;
        bool                       selfIDArmed       = false;
        uint32_t                   collapsedBusResets= 0;
        uint32_t                   lastLoggedNodeID  = 0xFFFFFFFFu;
        bool                       lastLoggedValid   = false;
        bool                       lastLoggedRoot    = false;
        bool                       didInitialPhyScan = false;
        
        // Cycle inconsistent rate limiting 
        uint32_t                   cycleInconsistentCount = 0;
        uint64_t                   lastCycleInconsistentTime = 0;

        // PHY access helper
        class ASOHCIPHYAccess*     phyAccess     = nullptr;

        // DMA Contexts (legacy - will be managed by context managers)
        class ASOHCIARContext*     arRequestContext  = nullptr;
        class ASOHCIARContext*     arResponseContext = nullptr;
        class ASOHCIATContext*     atRequestContext  = nullptr;
        class ASOHCIATContext*     atResponseContext = nullptr;

        // Context Managers (OHCI 1.1 DMA orchestration)
        class ASOHCIARManager*     arManager        = nullptr;
        class ASOHCIATManager*     atManager        = nullptr;
        class ASOHCIIRManager*     irManager        = nullptr;
        class ASOHCIITManager*     itManager        = nullptr;

        // Managers (factored subsystems)
        class SelfIDManager*       selfIDManager   = nullptr;
        class ConfigROMManager*    configROMManager= nullptr;
        class Topology*            topology        = nullptr;
    };

};

#endif /* ASOHCI_h */
