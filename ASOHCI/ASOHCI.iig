//
//  ASOHCI.iig
//  ASOHCI
//
//  Created by Aleksandr Shabelnikov on 23.08.2025.
//

#ifndef ASOHCI_h
#define ASOHCI_h

#include <Availability.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/IOInterruptDispatchSource.iig>
#include <DriverKit/OSData.iig>
#include <DriverKit/IOBufferMemoryDescriptor.iig>
#include <DriverKit/IOMemoryDescriptor.iig>
#include <DriverKit/IOMemoryMap.iig>
#include <DriverKit/IODMACommand.iig>
#include <PCIDriverKit/IOPCIDevice.iig>
#include "ASOHCIDriverTypes.hpp"

// Include C++ standard library headers needed for shared_ptr
#include <memory>

// Forward declarations for new RAII architecture
// LinkHandle is a pure C++ class, not a DriverKit OSObject
// We'll use opaque pointers in the interface

class ASOHCI : public IOService
{
public:
    virtual bool init() override;
    virtual void free() override;
    virtual kern_return_t Start(IOService* provider) override;
    virtual kern_return_t Stop(IOService* provider) override;

    // Interrupt handling
    virtual void InterruptOccurred(OSAction* action, uint64_t count, uint64_t time)
        TYPE(IOInterruptDispatchSource::InterruptOccurred);

    // Public API methods
    virtual kern_return_t CopyBridgeLogs(OSData** outData) LOCALONLY;

    // =====================================================================================
    // Link Interface - Transaction Primitives for LinkHandle Adapter 
    // =====================================================================================
    
    // LinkHandle integration - called during Start()
    // Returns opaque pointer to LinkHandle (pure C++ object)
    virtual void* CreateLinkHandle() LOCALONLY;
    
    // Hardware state access
    virtual uint16_t GetNodeID() const LOCALONLY;
    virtual uint64_t GetLocalGUID() const LOCALONLY;
    virtual uint32_t GetGeneration() const LOCALONLY;
    virtual kern_return_t GetCycleTime(uint32_t* cycleTime) LOCALONLY;
    
    // Work queue access for LinkHandle
    virtual IODispatchQueue* GetDefaultQueue() const LOCALONLY;
    
    // Transaction primitives for Config ROM reading
    virtual kern_return_t ReadQuad(uint16_t nodeID, uint16_t addrHi, uint32_t addrLo,
                                   uint32_t* outValue, uint32_t generation, uint32_t speed) LOCALONLY;
    virtual kern_return_t ReadBlock(uint16_t nodeID, uint16_t addrHi, uint32_t addrLo,
                                    IOMemoryDescriptor* buffer, IOByteCount offset,
                                    uint32_t length, uint32_t generation, uint32_t speed) LOCALONLY;
    virtual kern_return_t WriteQuad(uint16_t nodeID, uint16_t addrHi, uint32_t addrLo,
                                    uint32_t value, uint32_t generation, uint32_t speed) LOCALONLY;
    
    // Bus management operations
    virtual kern_return_t ResetBus(bool forceIBR = false) LOCALONLY;
    virtual kern_return_t SendPHYPacket(uint32_t quadlet) LOCALONLY;
    virtual kern_return_t SetContender(bool enable) LOCALONLY;
    virtual kern_return_t SetRootHoldOff(bool enable) LOCALONLY;
    
    // Config ROM management
    virtual kern_return_t UpdateConfigROM(IOMemoryDescriptor* romData) LOCALONLY;

private:
    // State machine methods
    virtual ASOHCIState GetCurrentState() const LOCALONLY;
    virtual const char* GetCurrentStateString() const LOCALONLY;
    virtual bool IsInState(ASOHCIState state) const LOCALONLY;

    // Helper methods
    virtual void ArmSelfIDReceive(bool clearCount) LOCALONLY;
    
    // Error handling
    virtual void CleanupOnError() LOCALONLY;

    // Implementation helper methods
    virtual kern_return_t CreateWorkQueue() LOCALONLY;
    virtual kern_return_t MapDeviceMemory() LOCALONLY;
    virtual kern_return_t InitializeManagers() LOCALONLY;
    virtual kern_return_t InitializeOHCI() LOCALONLY;
    virtual kern_return_t SetupInterrupts() LOCALONLY;
    virtual kern_return_t InitializeOHCIHardware() LOCALONLY;

    // NO ivars struct exposed - move to implementation
};

#endif /* ASOHCI_h */
